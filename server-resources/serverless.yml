# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: perfsys-cloud-crm-api # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

#plugins:
#- serverless-prune-plugin


custom:
  dataUploadBucketName: perfsys-cloud-crm-updates-data-${opt:stage, 'dev'}
  identityProviderName:  ${file(./deployUtils.js):getCleanString}_CloudCrm
#  prune:
#    automatic: true
#    number: 3

provider:
  name: aws
  runtime: nodejs8.10
#  versionFunctions: false
  stage: ${opt:stage, 'dev'}
  region: eu-west-1
  usagePlan:
    quota:
      limit: 10
      offset: 0
      period: DAY
    throttle:
      burstLimit: 10
      rateLimit: 1

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1


  iamRoleStatements:
    -
      Effect: Allow
      Action:
        - dynamodb:BatchWriteItem
      Resource:
        - { "Fn::GetAtt": ["GroupsDynamoDBTable", "Arn" ] }
    -
      Resource:
        - Ref: ContactManagementTopic
      Effect: Allow
      Action:
        - SNS:Publish

# you can define service wide environment variables here
#  environment:
#    variable1: value1
  environment:
    CONTACTS_TABLE: ${self:provider.stage}-cloud-crm-contacts
    GROUPS_TABLE: ${self:provider.stage}-cloud-crm-groups
    CONTACT_UPDATES_TABLE: ${self:provider.stage}-cloud-crm-contact-updates
    COMPANIES_TABLE: ${self:provider.stage}-cloud-crm-companies
    AUTOMATIC_NOTIFICATIONS_TOPIC_TITLE: ${self:provider.stage}-cloud-crm-automatic-notifications
    AUTOMATIC_NOTIFICATIONS_TOPIC_ARN:
      Ref: ContactManagementTopic
    WEB_UI_BASE_URL: perfsys-cloud-crm-ui-${self:provider.stage}.s3-website-${self:provider.region}.amazonaws.com

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:

  initGroups:
    handler: functions/init-groups.handler

resources:
  Resources:
    ContactsDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: group_id
            AttributeType: S
          -
            AttributeName: name
            AttributeType: S
          -
            AttributeName: company_normalized
            AttributeType: S
        KeySchema:
          -
            AttributeName: group_id
            KeyType: HASH
          -
            AttributeName: name
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.CONTACTS_TABLE}
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        GlobalSecondaryIndexes:
          - IndexName: CompanyIndex
            KeySchema:
              - AttributeName: company_normalized
                KeyType: HASH
            Projection:
              NonKeyAttributes:
                - group_name
                - name
                - status_name
                - position
                - position_normalized
              ProjectionType: INCLUDE
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1

    ContactUpdatesDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.CONTACT_UPDATES_TABLE}

    GroupsDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S

        KeySchema:
          -
            AttributeName: id
            KeyType: HASH

        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.GROUPS_TABLE}

    InitGroupsCustomResource:
      Type: Custom::InitGroupsCustomResource
      DependsOn: GroupsDynamoDBTable
      Properties:
        ServiceToken:
          Fn::GetAtt: [InitGroupsLambdaFunction, Arn]
        Table: ${self:provider.environment.GROUPS_TABLE}
        Version: 1

    CompaniesDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: company_normalized
            AttributeType: S
        KeySchema:
          -
            AttributeName: company_normalized
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.COMPANIES_TABLE}

    ContactManagementTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: Cloud CRM automatic notifications
        TopicName: ${self:provider.environment.AUTOMATIC_NOTIFICATIONS_TOPIC_TITLE}

    S3DataUploadBucket:
      Type: AWS::S3::Bucket
      DeletionPolicy: Retain
      Properties:
        AccessControl: PublicRead
        BucketName: ${self:custom.dataUploadBucketName}
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
              - "*"
              AllowedMethods:
              - GET
              - POST
              - PUT
              - DELETE
              - HEAD
              AllowedOrigins:
              - "*"
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: false
          IgnorePublicAcls: true
          RestrictPublicBuckets: false

    S3DataUploadBucketBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: S3DataUploadBucket
        PolicyDocument:
          Statement:
          - Sid: PublicGetObject
            Effect: Allow
            Principal: "*"
            Action:
            - s3:GetObject
            Resource:
              Fn::Join:
              - ""
              - - "arn:aws:s3:::"
                - Ref: S3DataUploadBucket
                - "/*"

    UnAuthCognitoIdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        IdentityPoolName: ${self:custom.identityProviderName}
        AllowUnauthenticatedIdentities: true

    UnAuthCognitoIdentityPoolUnauthenticatedRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: UnAuthCognitoIdentityPoolRole-${self:provider.stage}
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
          -
            Effect: "Allow"
            Principal:
              Federated: "cognito-identity.amazonaws.com"
            Action:
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud":
                  Ref: UnAuthCognitoIdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": unauthenticated
        Policies:
          - PolicyName: "UnAuthCognitoPolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
              - Effect: "Allow"
                Action:
                - "mobileanalytics:PutEvents"
                - "cognito-sync:*"
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                 - "Fn::Join":
                    - '/'
                    - - "Fn::GetAtt": ["S3DataUploadBucket", "Arn" ]
                      - '*'

    UnAuthCognitoIdentityPoolRoleAttachment:
      Type: AWS::Cognito::IdentityPoolRoleAttachment
      Properties:
        IdentityPoolId: !Ref UnAuthCognitoIdentityPool
        Roles:
          "unauthenticated":
            Fn::GetAtt:
            - UnAuthCognitoIdentityPoolUnauthenticatedRole
            - Arn


  Outputs:
    ContactsTable:
      Description: Table of Cloud CRM contacts list
      Value:
        Fn::GetAtt:
            - ContactsDynamoDBTable
            - Arn
      Export:
        Name:
          "Fn::Join":
          - ':'
          - - Ref: 'AWS::StackName'
            - 'ContactsDynamoDBTable'

    ContactsTableName:
      Description: Table of Cloud CRM contacts list
      Value:
        "Ref": ContactsDynamoDBTable
      Export:
        Name:
          "Fn::Join":
          - ':'
          - - Ref: 'AWS::StackName'
            - 'ContactsDynamoDBTableName'

    ContactsTableStreamArn:
      Description: Table of Cloud CRM contacts list
      Value:
        Fn::GetAtt:
        - ContactsDynamoDBTable
        - StreamArn
      Export:
        Name:
          "Fn::Join":
          - ':'
          - - Ref: 'AWS::StackName'
            - 'ContactsDynamoDBTableStreamArn'

    ContactsTableCompanyIndex:
      Description: Company Index of Contacts table
      Value:
        Fn::Join:
          - ''
          -
            - "Fn::GetAtt": ["ContactsDynamoDBTable", "Arn" ]
            - '/index/CompanyIndex'
      Export:
        Name:
          "Fn::Join":
          - ':'
          - - Ref: 'AWS::StackName'
            - 'ContactsDynamoDBTableCompanyIndex'

    UpdatesTable:
      Description: Table of Cloud CRM contacts updates
      Value:
        Fn::GetAtt:
            - ContactUpdatesDynamoDBTable
            - Arn
      Export:
        Name:
          "Fn::Join":
          - ':'
          - - Ref: 'AWS::StackName'
            - 'ContactUpdatesDynamoDBTable'

    UpdatesTableName:
      Description: Table of Cloud CRM contacts updates list
      Value:
        "Ref": ContactUpdatesDynamoDBTable
      Export:
        Name:
          "Fn::Join":
          - ':'
          - - Ref: 'AWS::StackName'
            - 'ContactUpdatesDynamoDBTableName'

    GroupsTable:
      Description: Table of Cloud CRM groups list
      Value:
        Fn::GetAtt:
            - GroupsDynamoDBTable
            - Arn
      Export:
        Name:
          "Fn::Join":
          - ':'
          - - Ref: 'AWS::StackName'
            - 'GroupsDynamoDBTable'

    GroupsTableName:
      Description: Table of Cloud CRM groups list
      Value:
        "Ref": GroupsDynamoDBTable
      Export:
        Name:
          "Fn::Join":
          - ':'
          - - Ref: 'AWS::StackName'
            - 'GroupsDynamoDBTableName'

    CompaniesTable:
      Description: Table of Cloud CRM companies list
      Value:
        Fn::GetAtt:
            - CompaniesDynamoDBTable
            - Arn
      Export:
        Name:
          "Fn::Join":
          - ':'
          - - Ref: 'AWS::StackName'
            - 'CompaniesDynamoDBTable'

    CompaniesTableName:
      Description: Table of Cloud CRM companies list
      Value:
        "Ref": CompaniesDynamoDBTable
      Export:
        Name:
          "Fn::Join":
          - ':'
          - - Ref: 'AWS::StackName'
            - 'CompaniesDynamoDBTableName'


    UnAuthCognitoIdentityPool:
      Description: Identity Poll for Unauthenticated users
      Value:
        "Ref": "UnAuthCognitoIdentityPool"
      Export:
        Name:
          "Fn::Join":
            - ':'
            - - Ref: 'AWS::StackName'
              - 'UnAuthCognitoIdentityPool'

    S3DataUploadBucket:
      Description: Data upload bucket arn
      Value:
        "Fn::GetAtt": ["S3DataUploadBucket", "Arn" ]
      Export:
        Name:
          "Fn::Join":
          - ':'
          -
            - Ref: 'AWS::StackName'
            - 'S3DataUploadBucket'

    S3DataUploadBucketName:
      Description: Data upload bucket name
      Value: ${self:custom.dataUploadBucketName}
      Export:
        Name:
          "Fn::Join":
          - ':'
          -
            - Ref: 'AWS::StackName'
            - 'S3DataUploadBucketName'

    ContactManagementTopic:
      Description: ContactManagementTopic arn
      Value:
        "Ref": ContactManagementTopic
      Export:
        Name:
          "Fn::Join":
          - ':'
          -
            - Ref: 'AWS::StackName'
            - 'ContactManagementTopic'

    ContactManagementTopicName:
      Description: ContactManagementTopic name
      Value:
        "Fn::GetAtt": ["ContactManagementTopic", "TopicName" ]
      Export:
        Name:
          "Fn::Join":
          - ':'
          -
            - Ref: 'AWS::StackName'
            - 'ContactManagementTopicName'


